//Modificaţi exemplul 3 astfel încât să permită obtinerea unui nou punct, avand coordonatele obtinute prin adunarea coordonatelor a două astfel de puncte. Numele noului punct va fi rezultat prin concatenarea numelor celor două puncte. Adaugati si testati o metoda care calculeaza distanta de la un punct la origine. Modificați clasa astfel încât sa eliminați metoda afis() folosind in schimb metode accesor adecvate. Eliminați de asemenea atributul lungime_sir modificând adecvat metodele clasei. Testati utilizand si functii specifice sirurilor de caractere din VC++1y/2z (strcpy_s( ) si strcat_s( )).
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
const int dim_sir = 20;
class CPunctText {
    int x;
    int y;
    int lungime_sir;//atribut redundant
    char* sNume;
public:
    //constructor explicit vid
    CPunctText();
    //constructor cu parametri
    CPunctText(int ix, int iy, const char* sText = "Punct");
    //constructor de copiere
    CPunctText(const CPunctText& pct);
    //destructor:
    ~CPunctText();
    int getX() { return x; }
    int getY() { return y; }
    char* getSNume() { return sNume; }
    //void sum(CPunctText,CPunctText);
    CPunctText sum(CPunctText);
    double distance();
};
CPunctText::CPunctText() {
    cout << "\n constructor explicit vid";
    lungime_sir = dim_sir;
    sNume = new char[lungime_sir];
}
CPunctText::CPunctText(int ix, int iy, const char* sText) {
    cout << "\n constructor cu parametri";
    lungime_sir = strlen(sText) + 1;// pentru |0
    sNume = new char[lungime_sir];
    x = ix;
    y = iy;
    strcpy(sNume, sText);
}
CPunctText::CPunctText(const CPunctText& pct) {
    cout << "\n constructor de copiere";
    sNume = new char[pct.lungime_sir];
    x = pct.x;
    y = pct.y;
    lungime_sir = pct.lungime_sir;
    strcpy(sNume, pct.sNume);
}
CPunctText::~CPunctText() {
    cout << "\n destructor";
    delete[] sNume;
}
CPunctText CPunctText::sum(CPunctText pct) {
    CPunctText c;
    c.x = x + pct.x;
    c.y = y + pct.y;
    strcpy(c.sNume, sNume);
    strcat(c.sNume, pct.sNume);
    return c;
}
/*void CPunctText::sum(CPunctText pct1, CPunctText pct2) {
        x = pct1.x + pct2.x;
        y = pct1.y + pct2.y;
        //strcpy_s(sNume,strlen(pct1.sNume) +1, pct1.sNume);
        strcpy(sNume, pct1.sNume);
        strcat(sNume, pct2.sNume);
}*/
//void CPunctText::sum(CPunctText        pct1, CPunctText pct2){}
double CPunctText::distance() { return sqrt(x * x + y * y); }

int main() {
    CPunctText cpt1(1, 2, "Punct1");//apel constructor cu parametri
    CPunctText cpt2(cpt1); //apel constructor de copiere
    CPunctText cpt3 = cpt2; //apel constructor de copiere
    CPunctText cpt4(4, 5); //apel constructor cu parametri
    CPunctText cpt5(3, 4, "Punct5");
    cout << "\n Distanta de la origine la " << cpt5.getSNume() << " este " << cpt5.distance();

    CPunctText cpt = cpt1.sum(cpt5);//copy constructor

    cout << endl << "Suma este:" << cpt.getSNume() << " " << cpt.getX() << " " << cpt.getY();

}




//Să se scrie o aplicaţie C/C++ care să modeleze obiectual un tablou unidimensional de numere reale. Creaţi două instanţe ale clasei şi afișați valorile unui al 3-lea tablou, obținute prin scăderea elementelelor corespunzătoare din primele 2 tablouri. Dacă tablourile au lungimi diferite, tabloul rezultat va avea lungimea tabloului cel mai scurt.
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
#define DIM 100

class Sir {
        int lungime;
        float* tab;
public:
        Sir() {
        };//constructor fara parametrii
        Sir(int n) {
                lungime = n;
                tab = new float[lungime];
                cout << "Introduceti numerele intregi din sir:\n";
                for (int i = 0; i < lungime; i++)
                {
                        cout << "\ttab[" << i + 1 << "]=";
                        cin >> *(tab + i);
                }
                cout << endl;
        }//constructor cu parametrii
        //destructor
        ~Sir() {
                delete(tab);
        }
        //constructor de copiere
        Sir(Sir& s) {
                lungime = s.lungime;
                tab = new float[lungime];
                for (int i = 0; i < lungime; i++)
                        *(tab + i) = s.tab[i];
        }
        void afis(int lun)
        {
                for (int i = 0; i < lun; i++)
                        cout << *(tab + i) << " ";
                cout << endl;
        }
        int diferenta(Sir s1, Sir s2)
        {
                int l;
                if (s1.lungime <= s2.lungime)
                        l = s1.lungime;
                else
                        l = s2.lungime;
                for (int i = 0; i < l; i++)
                        *(tab + i) = s1.tab[i] - s2.tab[i];
                return 1;
        }

};
int main()
{
        int n1, n2;
        cout << "Introduceti numarul de numere al primului sir:";
        cin >> n1;
        cout << "Introduceti numarul de numere din al doilea sir: ";
        cin >> n2;
        Sir s1(n1), s2(n2), s;
        cout << "Sirul 1: ";
        s1.afis(n1);
        cout << "Sirul 2: ";
        s2.afis(n2);
        int n3;
        n3 = s.diferenta(s1, s2);
        cout << "Prin diferenta primelor doua siruri a rezultat sirul: ";
        s.afis(n3);
        cout << endl;
        cin.ignore();
        cin.get();
}




//Să se scrie o aplicaţie în care se modelează clasa Student cu nume, prenume, numar note si notele din sesiunea din iarnă declarat printr-un pointer de tip int. Să se afişeze numele studenţilor din grupă care au restanțe și apoi numele primilor 3 studenți din grupă în ordinea mediilor, care se va afisa si ea.
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstring>
using namespace std;
class Student
{
private:
    char nume[10];
    char prenume[10];
    int note[5];
    void citirenote()
    {
        for (int i = 1; i <= 5; i++)
        {
            cin >> note[i];
        }
    }
public:
    void citirenume(char x[10])
    {
        strcpy(nume, x);
    }
    void citireprenume(char y[10])
    {

        strcpy(prenume, y);
    }


    float getnote()
    {
        citirenote();
        for (int i = 1; i <= 5; i++)
        {

            if (note[i] < 5)
            {
                cout << "Restanta";
                return 0;
            }

        }
    }

};
int main()
{
    Student stud[100];
    int n;
    char sirnume[30];
    char sirprenume[30];
    cout << "Introduce-ti numarul studentilor : ";
    cin >> n;
    for (int i = 1; i <= n; i++)
    {
        cout << "Introduce-mi numele studentului : ";
        cin >> sirnume;
        stud[i].citirenume(sirnume);
        cout << "Introduce-mi numele studentului : ";
        cin >> sirprenume;
        stud[i].citirenume(sirprenume);
        cout << "Introduce-mi notele studentului : ";
        stud[i].getnote();
    }

    return 0;
}





//Consideram clasa Fractie care are doua atribute intregi private a si b pentru numarator si numitor, doua metode de tip set( ) respectiv get( ) pentru atributele clasei publice si o metoda simplifica( ) publica care simplifica obiectul curent Fractie de apel, returnând un alt obiect simplificat. Metoda simplifica( ) va apela o metoda private cmmdc( ) pentru simplificarea fracției. Definiți un constructor explicit fara parametri care initializeaza a cu 0 si b cu 1, si un constructor explicit cu doi parametri care va fi apelat dupa ce s-a verificat posibilitatea definirii unei fractii (b!=0). Definiți o metoda aduna_fractie( ) care are ca si parametru un obiect de tip Fractie si returneaza suma obiectului curent de apel cu cel dat ca si parametru, ca si un alt obiect de tip Fractie. Analog definiti metode pentru scadere, inmultire si impartire. Instantiati doua obiecte de tip Fractie cu date citite de la tastatura. Afisati atributele initiale si cele obtinute dupa apelul metodei simplifica( ). Efectuati operatiile implementate prin metodele clasei si afisati rezultatele.
#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<cstdlib>
using namespace std;
class Fractie
{
private:
    int a, b;
    void cmmdc(int x, int y)
    {
        while (x != y)
        {
            if (x > y)
            {
                x = x - y;
            }
            else
            {
                y = y - x;
            }
        }


    }
public:
    Fractie()
    {
        int m = 0, n = 1;
        a = m;
        b = n;
    }
    void seta(int x)
    {
        a = x;
    }
    void setb(int y)
    {
        b = y;
    }
    int geta()
    {
        return a;
    }
    int getb()
    {
        return b;
    }

    void simplifica()
    {

        cout << "Divizorii lui a :" << endl;
        for (int i = 1; i <= a; i++)
        {
            if (a % i == 0)
            {
                cout << i << endl;
            }
        }
        cout << endl;
        cout << "Divizorii lui b: " << endl;
        for (int j = 1; j <= b; j++)
        {
            if (b % j == 0)
            {
                cout << j << endl;
            }
        }
        int x, y;
        x = a;
        y = b;
        //cout << "fractia nesimplificata este: " << x / y;
        cmmdc(x, y);

        cout << "fractia nesimplificata este: " << a << "/" << b << endl;
        cout << "fractia simplificata este: " << a / x << "/" << b / x << endl;
    }
    ~Fractie()
    {
        a = 0;
        b = 0;
        cout << "Apelare destructor..";
    }

};
int main()
{
    Fractie obj;
    obj.seta(5);
    obj.setb(10);
    obj.simplifica();
    obj.~Fractie();
    cout << endl;
    Fractie obj2;
    obj2.seta(8);
    obj2.setb(16);
    obj2.simplifica();
    return 0;
}