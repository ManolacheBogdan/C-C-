//În cazul exemplului 2 (care exemplifică moştenirea simplă, cu clasa de bază Pozitie şi derivată Punct) se cer următoarele:
//a.urmariţi şi verificaţi ordinea de apel pentru constructori / destructori
//b.extindeţi funcţia main() pentru a utiliza toate metodele din clasa de baza şi din clasa derivată
//c.introduceţi o nouă clasă Cerc(date şi metode), derivată din clasa Pozitie
//d.scrieţi un program ce utilizează aceste clase.

#include <iostream>
using namespace std;
class Pozitie {
protected:
    int x, y;
public:
    Pozitie(int = 0, int = 0);
    Pozitie(const Pozitie&);
    ~Pozitie();
    //void afisare();
    //void deplasare(int, int);
    virtual void afisare();
    virtual void deplasare(int, int);
};//CB
// constructor
Pozitie::Pozitie(int abs, int ord) {
    x = abs; y = ord;
    cout << "Constructor CB \"Pozitie\", ";
    afisare();
}
//constructor de copiere
Pozitie::Pozitie(const Pozitie& p) {
    x = p.x;
    y = p.y;
    cout << "Constructor de copiere CB \"Pozitie\", ";
    afisare();
}
// destructor
Pozitie::~Pozitie() {
    cout << "Destructor CB \"Pozitie \", ";
    afisare();
}
void Pozitie::afisare() {
    cout << " CB afisare: coordonate: x = " << x << ", y = " << y << "\n";
}
void Pozitie::deplasare(int dx, int dy) {
    cout << "CB: deplasare" << endl;
    x += dx; y += dy;
}
// clasa derivata
class Punct : public Pozitie {
    int vizibil;
    char culoare;
public:
    Punct(int = 0, int = 0, char = 'A');
    Punct(const Punct&);
    ~Punct();
    void arata() {
        vizibil = 1;
    }
    void ascunde() {
        vizibil = 0;
    }
    void coloreaza(char c) {
        culoare = c;
    }
    void deplasare(int, int);
    void afisare();
};//CD
// constructor
Punct::Punct(int abs, int ord, char c) :Pozitie(abs, ord) {
    vizibil = 0;
    culoare = c;
    cout << "Constructor CD \"Punct\", ";
    afisare();//CD
}
// constructor de copiere
Punct::Punct(const Punct& p) :Pozitie(p.x, p.y) {
    vizibil = p.vizibil;
    culoare = p.culoare;
    cout << "Constructor de copiere CD \"Punct\", ";
    afisare();//CD
}
// destructor
Punct::~Punct() {
    cout << "Destructor CD \"Punct\", ";
    afisare();//CD
}
// redefinire functie de deplasare in clasa derivata
void Punct::deplasare(int dx, int dy) {
    if (vizibil) {
        cout << " CD: Deplasare afisare CD\n";
        x += dx;
        y += dy;
        afisare();//CD
    }
    else {
        x += dx;
        y += dy;
        cout << "Deplasare prin CD afisare din CB\n";
        Pozitie::afisare();
    }
}
// redefinire metoda de afisare in clasa derivata
void Punct::afisare() {
    cout << "Pozitie: x = " << x << ", y = " << y;
    cout << ", culoare: " << culoare;
    if (vizibil) cout << ", vizibil \n";
    else cout << ", invizibil \n";
}
class Cerc : public Pozitie
{
private:
    double raza;
public:
    Cerc(double raza)
    {
        this->raza = raza;

    }
    double arieCerc()
    {
        return 3.14 * raza * raza;
    }
    ~Cerc() {}
};





//La exemplul al treilea extindeţi clasa de bază cu alte metode virtuale, redefinite în clasele derivate, cum ar fi metode get( ) şi set( ) pentru greutatea vehiculului (variabila greutate).

#include <iostream>
using namespace std;

class Vehicul {
    int roti;
    float greutate;
public:
    Vehicul()
    {

        greutate = 0;
    }
    Vehicul(int g)
    {

        greutate = g;
    }
    virtual void mesaj()
    {
        cout << "Mesaj din clasa Vehicul\n";
    }
    virtual int HeavySetter(double x)
    {
        greutate = x;
        return 0;
    }
    virtual int afiareGreutate(Vehicul x)
    {
        cout << x.greutate;
        return x.greutate;
    }
};

class Automobil : public Vehicul {
    int incarcatura_pasageri;
public:
    void mesaj()
    {
        cout << "Mesaj din clasa Automobil\n";
    }
    void greutate()
    {

        cout << "Mesaj cu greutate din  clasa Automobil!" << endl;
    }

    void afisaregreutate()
    {
        Vehicul obiect(4);
        int x = afiareGreutate(obiect);
    }
};
class Camion : public Vehicul {
    int incarcatura_pasageri;
    float incarcatura_utila;
public:
    int pasageri()
    {
        return incarcatura_pasageri;
    }
    void greutate()
    {
        cout << "Mesaj cu greutate din  clasa Camion!" << endl;
    }
    void afisaregreutate()
    {
        Vehicul obj(5);
        int x = afiareGreutate(obj);
    }
};
class Barca : public Vehicul {
    int incarcatura_pasageri;
public:
    int pasegeri()
    {
        return incarcatura_pasageri;
    }
    void mesaj()
    {
        cout << "Mesaj din clasa Barca\n";
    }
    void greutate()
    {
        cout << "Mesaj cu greutate din  clasa Barca!" << endl;
    }
    void afisaregreutate()
    {
        Vehicul set(7);
        int x = afiareGreutate(set);
    }
};

int main()
{
    // apel direct, prin intermediul unor obiecte specifice
    Vehicul monocicleta;
    Automobil ford;
    Camion semi;
    Barca barca_de_pescuit;
    monocicleta.mesaj();
    ford.mesaj();
    semi.mesaj();//din Vehicul ca si CB
    barca_de_pescuit.mesaj();
    // apel prin intermediul unui pointer specific
    Vehicul* pmonocicleta;
    Automobil* pford;
    Camion* psemi;
    Barca* pbarca_de_pescuit;
    cout << "\n";
    pmonocicleta = &monocicleta;
    pmonocicleta->mesaj();
    pford = &ford;
    pford->mesaj();
    psemi = &semi;
    psemi->mesaj();//din CB
    pbarca_de_pescuit = &barca_de_pescuit;
    pbarca_de_pescuit->mesaj();
    // apel prin intermediul unui pointer catre un obiect al clasei de baza
    cout << "\n";
    pmonocicleta = &monocicleta;
    pmonocicleta->mesaj();//Vehicul
    pmonocicleta = &ford;//upcasting
    pmonocicleta->mesaj();//Automobil
    pmonocicleta = &semi;//upcasting
    pmonocicleta->mesaj();//Camion- Vehicul
    pmonocicleta = &barca_de_pescuit;//upcasting
    pmonocicleta->mesaj();//Barca

    for (int i = 1; i <= 3; i++)
        cout << endl;


    Automobil ok;
    ok.afisaregreutate();
    cout << endl;
    Camion tir;
    tir.afisaregreutate();
    cout << endl;
    Barca brc;
    brc.afisaregreutate();
    return 0;
}





//Să se scrie un program C++ în care se defineşte o clasă Militar cu o metodă publică virtuală sunt_militar( ) care indică apartenenţa la armată. Derivaţi clasa Militar pentru a crea clasa Soldat şi clasa Ofiter. Derivaţi mai departe clasa Ofiter pentru a obtine clasele Locotenent, Colonel, Capitan, General. Redefiniti metoda sunt_militar( ) pentru a indica gradul militar pentru fiecare clasa specifica. Instantiati fiecare clasa Soldat, Locotenent,...,General, si apelati metoda sunt_militar( ).

#include <iostream>
using namespace std;
class Militar {
public:
        virtual void sunt_militar() {
                cout << "\nSunt Militar!";
        }
};
class Soldat : public Militar {
        void sunt_militar() {
                cout << "\nSunt Soldat!";
        };
};
class Ofiter : public Militar {
public: void sunt_militar() {
        cout << "\nSunt Ofiter!";
};
};
class Locotenent : public Ofiter {
public: void sunt_militar() {

        cout << "\nSunt Locotenent!";
};
};
class Colonel : public Ofiter {
public: void sunt_militar() {
        cout << "\nSunt Colonel!";
};
};
class Capitan : public Ofiter {
public: void sunt_militar() {
        cout << "\nSunt Capitan!";
};
};
class General : public Ofiter {
public: void sunt_militar() {
        cout << "\nSunt General!";
};
};
int main() {
        Militar militar1;
        militar1.sunt_militar();
        Ofiter ofiter1;
        ofiter1.sunt_militar();
        Locotenent locotenent1;
        locotenent1.sunt_militar();
        Colonel colonel1;
        colonel1.sunt_militar();
        Capitan capitan1;
        capitan1.sunt_militar();
        General general1;
        general1.sunt_militar();
        return 0;
}





//Declarati o clasa Animal, care va contine o metoda pur virtuala, respira( ) si doua metode virtuale manaca( ) si doarme( ). Derivati in mod public o clasa Caine si alta Peste, care vor defini metoda pur virtuala, iar clasa Caine va redefini metoda mananca( ), iar Peste metoda doarme( ). Instantiati obiecte din cele doua clase si apelati metodele specifice. Definiti apoi un tablou de tip Animal, care va contine obiecte din clasele derivate, daca e posibil. Daca nu, gasiti o solutie adecvata.

#include <iostream>
using namespace std;
class Animal {
public:
        virtual void respira() = 0;
        virtual void mananca() {
                cout << "\nAnimalul mananca!" << endl;
        }
        virtual void doarme() {
                cout << "\nAnimalul doarme!" << endl;
        }
};
class Caine : public Animal {
public:
        Caine() {}
        void respira() {
                cout << "\nCainele respira!" << endl;
        }
        void mananca() {
                cout << "\nCainele mananca" << endl;
        }
};
class Peste : public Animal {
public:
        Peste() {}
        void respira() {
                cout << "\nPestele respira!" << endl;
        }
        void doarme() {
                cout << "\nPestele doarme" << endl;
        }
};
int main() {
        Caine c;
        c.mananca();
        c.respira();
        cout << endl;
        Peste p;
        p.mananca();
        p.respira();
        return 0;
}